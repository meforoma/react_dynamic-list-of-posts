{"version":3,"sources":["components/PostsList/PostsList.tsx","api/api.ts","api/posts.ts","components/NewCommentForm/NewCommentForm.tsx","components/PostDetails/PostDetails.tsx","components/UserSelect/UserSelect.tsx","App.tsx","index.tsx"],"names":["PostsList","props","className","posts","length","map","post","userId","title","id","toString","type","onClick","event","toggle","selectedPostId","currentTarget","selectPost","BASE_URL","request","endpoint","postId","methodParam","fetch","method","then","response","ok","json","Error","status","statusText","getPostComments","NewCommentForm","updateComments","useState","commentName","setName","commentEmail","setEmail","commentBody","setBody","handleSubmit","comment","headers","body","JSON","stringify","submitComment","name","email","handleChange","target","value","preventSubmit","onSubmit","preventDefault","required","placeholder","onChange","PostDetails","postDetails","setPostDetails","postComments","setPostComments","toggleComments","setToggleComments","watchComment","setWatchComment","useEffect","result","commentId","UserSelect","selectUser","htmlFor","App","user","setUser","setPosts","setSelectedPostId","data","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.9f20782b.chunk.js","sourcesContent":["/* eslint-disable no-console */\nimport React from 'react';\nimport './PostsList.scss';\n\nimport { Post } from '../../types/types';\n\ntype Props = {\n  posts: Post[];\n  selectPost: (x: number) => void;\n  selectedPostId: number;\n};\n\nexport const PostsList: React.FC<Props> = (props) => {\n  return (\n    <div className=\"PostsList\">\n      <h2>{`Posts: ${props.posts.length}`}</h2>\n\n      <ul className=\"PostsList__list\">\n\n        {props.posts.map(post => (\n          <li\n            key={post.id}\n            className=\"PostsList__item\"\n          >\n            <div>\n              <b>\n                {`[User #${post.userId}]: `}\n              </b>\n              {post.title}\n            </div>\n\n            <button\n              id={post.id.toString()}\n              type=\"button\"\n              className=\"PostsList__button button\"\n              onClick={(event) => {\n                const toggle = props.selectedPostId === post.id\n                  ? 0\n                  : +event.currentTarget.id;\n\n                props.selectPost(toggle);\n              }}\n            >\n              {props.selectedPostId === post.id\n                ? 'Close'\n                : 'Open'}\n            </button>\n          </li>\n        ))}\n\n      </ul>\n    </div>\n  );\n};\n","export const BASE_URL = 'https://mate.academy/students-api';\n","import { BASE_URL } from './api';\n\nexport const request = (\n  endpoint = '/posts',\n  postId = '',\n  userId = '',\n  methodParam = 'GET',\n) => {\n  return fetch(`${BASE_URL}${endpoint}${postId}${userId}`, { method: methodParam })\n    .then(response => {\n      if (!response.ok) {\n        return new Error(`${response.status} -- ${response.statusText}`);\n      }\n\n      return response.json();\n    });\n};\n\nexport const getUserPosts = (userId: number | string) => {\n  if (userId === 'all') {\n    return request('/posts');\n  }\n\n  return request('/posts', '', `?userId=${+userId}`);\n};\n\nexport const getPostDetails = (postId: number | string) => {\n  return request('/posts', `/${postId}`);\n};\n\nexport const getPostComments = (postId: number | string) => {\n  return request('/comments', '', `?postId=${postId}`);\n};\n\nexport const removeComment = (commentId: number | string) => {\n  return request('/comments', '', `/${commentId}`, 'DELETE');\n};\n\nexport const submitComment = (comment: {}) => {\n  return fetch(`${BASE_URL}/comments`, {\n    method: 'POST',\n    headers: {\n      'Content-type': 'application/json; charset=UTF-8',\n    },\n    body: JSON.stringify(comment),\n  });\n};\n","/* eslint-disable no-console */\nimport React, { useState } from 'react';\nimport { submitComment } from '../../api/posts';\nimport './NewCommentForm.scss';\n\ntype Props = {\n  postId: number;\n  updateComments: () => void;\n};\n\nexport const NewCommentForm: React.FC<Props> = ({ postId, updateComments }) => {\n  const [commentName, setName] = useState('');\n  const [commentEmail, setEmail] = useState('');\n  const [commentBody, setBody] = useState('');\n\n  const resetState = () => {\n    setName('');\n    setEmail('');\n    setBody('');\n  };\n\n  const handleSubmit = () => {\n    const comment = {\n      postId,\n      name: commentName,\n      email: commentEmail,\n      body: commentBody,\n    };\n\n    submitComment(comment);\n\n    resetState();\n    updateComments();\n  };\n\n  const handleChange = (\n    event: React.ChangeEvent<HTMLInputElement>\n    | React.ChangeEvent<HTMLTextAreaElement>,\n  ) => {\n    const { name, value } = event.target;\n\n    switch (name) {\n      case 'name':\n        setName(value);\n        break;\n      case 'email':\n        setEmail(value);\n        break;\n      default:\n        setBody(value);\n    }\n  };\n\n  const preventSubmit = commentEmail.length === 0\n    || commentName.length === 0\n    || commentBody.length === 0;\n\n  return (\n    <form\n      className=\"NewCommentForm\"\n      onSubmit={(event) => {\n        event.preventDefault();\n\n        handleSubmit();\n      }}\n    >\n\n      <div className=\"form-field\">\n        <input\n          required\n          type=\"email\"\n          name=\"email\"\n          placeholder=\"* Your email\"\n          className=\"NewCommentForm__input\"\n          value={commentEmail}\n          onChange={(event) => handleChange(event)}\n        />\n      </div>\n\n      <div className=\"form-field\">\n        <input\n          required\n          type=\"text\"\n          name=\"name\"\n          placeholder=\"* Your name\"\n          className=\"NewCommentForm__input\"\n          value={commentName}\n          onChange={(event) => handleChange(event)}\n        />\n      </div>\n\n      <div className=\"form-field\">\n        <textarea\n          required\n          name=\"body\"\n          placeholder=\"* Comment body:\"\n          className=\"NewCommentForm__input\"\n          value={commentBody}\n          onChange={(event) => handleChange(event)}\n        />\n      </div>\n\n      {!preventSubmit && (\n        <button\n          type=\"submit\"\n          className=\"NewCommentForm__submit-button button\"\n        >\n          ✅ Add a comment\n        </button>\n      )}\n    </form>\n  );\n};\n","/* eslint-disable @typescript-eslint/no-explicit-any */\nimport React, { useEffect, useState } from 'react';\nimport { getPostComments, getPostDetails, removeComment } from '../../api/posts';\nimport { Post } from '../../types/types';\nimport { NewCommentForm } from '../NewCommentForm';\nimport './PostDetails.scss';\n\ntype Props = {\n  selectedPostId: number;\n};\n\nexport const PostDetails: React.FC<Props> = (props) => {\n  const [postDetails, setPostDetails] = useState<Post>();\n  const [postComments, setPostComments] = useState([]);\n  const [toggleComments, setToggleComments] = useState(true);\n  const [watchComment, setWatchComment] = useState(false);\n\n  useEffect(() => {\n    getPostDetails(props.selectedPostId)\n      .then(result => setPostDetails(result));\n\n    getPostComments(props.selectedPostId)\n      .then(result => setPostComments(result));\n  }, [props.selectedPostId, watchComment]);\n\n  const updateComments = () => {\n    getPostComments(props.selectedPostId)\n      .then(result => setPostComments(result));\n\n    setWatchComment(!watchComment);\n  };\n\n  return (\n    <div className=\"PostDetails\">\n      <h3>{`Post details (id ${postDetails?.id}):`}</h3>\n\n      <section className=\"PostDetails__post\">\n        <p>{postDetails?.body}</p>\n      </section>\n\n      <section className=\"PostDetails__comments\">\n        {(postComments.length && (\n          <button\n            type=\"button\"\n            className=\"button\"\n            onClick={() => setToggleComments(!toggleComments)}\n          >\n            {`${toggleComments ? 'Hide' : 'Show'} `\n              + `${postComments.length} comment(s)`}\n          </button>\n        )) || 'No comments yet'}\n\n        <ul className=\"PostDetails__list\">\n\n          {toggleComments && (\n            postComments.map((comment: any) => (\n              <li key={comment.id} className=\"PostDetails__list-item\">\n                <button\n                  id={comment.id}\n                  type=\"button\"\n                  className=\"PostDetails__remove-button button\"\n                  onClick={() => {\n                    removeComment(comment.id);\n                    updateComments();\n                  }}\n                >\n                  X\n                </button>\n\n                <div>{`Comment by ${comment.email}`}</div>\n                <div>{`Name: ${comment.name}`}</div>\n                <div>{`Body: ${comment.body}`}</div>\n\n              </li>\n            ))\n          )}\n\n        </ul>\n      </section>\n\n      <section>\n        <div className=\"PostDetails__form-wrapper\">\n          <NewCommentForm\n            postId={props.selectedPostId}\n            updateComments={updateComments}\n          />\n        </div>\n      </section>\n    </div>\n  );\n};\n","import React from 'react';\n\ntype Props = {\n  userId: number | string,\n  selectUser: (userId: number | string) => void,\n};\n\nexport const UserSelect: React.FC<Props> = ({\n  userId,\n  selectUser,\n}) => {\n  return (\n    <label htmlFor=\"user-selector\">\n      Select a user: &nbsp;\n\n      <select\n        id=\"user-selector\"\n        className=\"App__user-selector\"\n        onChange={(event) => selectUser(event.target.value)}\n        value={userId}\n      >\n        <option value=\"all\">All users</option>\n        <option value=\"1\">Leanne Graham</option>\n        <option value=\"2\">Ervin Howell</option>\n        <option value=\"3\">Clementine Bauch</option>\n        <option value=\"4\">Patricia Lebsack</option>\n        <option value=\"5\">Chelsey Dietrich</option>\n        <option value=\"6\">Mrs. Dennis Schulist</option>\n        <option value=\"7\">Kurtis Weissnat</option>\n        <option value=\"8\">Nicholas Runolfsdottir V</option>\n        <option value=\"9\">Glenna Reichert</option>\n        <option value=\"10\">Leanne Graham</option>\n      </select>\n    </label>\n  );\n};\n","/* eslint-disable no-console */\nimport React, { useEffect, useState } from 'react';\nimport './App.scss';\nimport './styles/general.scss';\nimport { PostsList } from './components/PostsList';\nimport { PostDetails } from './components/PostDetails';\nimport { getUserPosts } from './api/posts';\nimport { UserSelect } from './components/UserSelect/UserSelect';\n\nconst App: React.FC = () => {\n  const [user, setUser] = useState<number | string>('all');\n  const [posts, setPosts] = useState([]);\n  const [selectedPostId, setSelectedPostId] = useState<number | null>(null);\n\n  useEffect(() => {\n    getUserPosts(user)\n      .then(data => {\n        setPosts(data);\n      });\n  }, [user, selectedPostId]);\n\n  const selectUser = (id: number | string) => {\n    setUser(id);\n  };\n\n  const selectPost = (id: number) => {\n    setSelectedPostId(id);\n  };\n\n  return (\n    <div className=\"App\">\n      <header className=\"App__header\">\n        <UserSelect\n          userId={user}\n          selectUser={selectUser}\n        />\n      </header>\n\n      <main className=\"App__main\">\n        <div className=\"App__sidebar\">\n          <PostsList\n            posts={posts}\n            selectPost={selectPost}\n            selectedPostId={selectedPostId || 0}\n          />\n        </div>\n\n        <div className=\"App__content\">\n          {selectedPostId\n            ? (\n              <PostDetails\n                selectedPostId={selectedPostId || 0}\n              />\n            )\n            : <h3>Pick a post to view details</h3>}\n        </div>\n      </main>\n    </div>\n  );\n};\n\nexport default App;\n","import ReactDOM from 'react-dom';\n\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}